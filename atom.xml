<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://IseEkko.github.io/</id>
    <title>isekko</title>
    <updated>2022-03-05T14:47:39.369Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://IseEkko.github.io/"/>
    <link rel="self" href="https://IseEkko.github.io/atom.xml"/>
    <subtitle>对个人笔记的总结，这个网站的笔记将会是我经过提炼过后的笔记。</subtitle>
    <logo>https://IseEkko.github.io/images/avatar.png</logo>
    <icon>https://IseEkko.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, isekko</rights>
    <entry>
        <title type="html"><![CDATA[链表中环的入口结点]]></title>
        <id>https://IseEkko.github.io/post/lian-biao-zhong-huan-de-ru-kou-jie-dian/</id>
        <link href="https://IseEkko.github.io/post/lian-biao-zhong-huan-de-ru-kou-jie-dian/">
        </link>
        <updated>2022-03-05T14:34:27.000Z</updated>
        <content type="html"><![CDATA[<h3 id="简介">简介</h3>
<p>原来遇见这个题目，被数学公式套路了，然后现在回过来学。并有了自己的思路。</p>
<h3 id="解法一">解法一</h3>
<p>今天想到了一个特别的想法，就是我们看这个题目其实想要考察我们的东西，很简单，就是去找到入口，那么我们如何找呢，我想的是首先我们要判断他是不是具有环，然后再去找他的入口，突然我的脑海里面出现了一个东西，map我突然恍然大悟，我们可以使用map去判断这个东西。<br>
使用到了是map[*ListNode]int<br>
当我们循环出现第二次的时候，那么这个节点就是入口，同时我们证明了这个是有环的。<br>
<img src="https://IseEkko.github.io//post-images/1646490954143.png" alt="" loading="lazy"><br>
就这样我们找了头节点。</p>
<h3 id="解法二">解法二</h3>
<p>解法二使用到的是快慢指针法。<br>
<img src="https://IseEkko.github.io//post-images/1646490959475.png" alt="" loading="lazy"><br>
这里我们需要好好的理解一下这个题目。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nacos使用]]></title>
        <id>https://IseEkko.github.io/post/nacos-shi-yong/</id>
        <link href="https://IseEkko.github.io/post/nacos-shi-yong/">
        </link>
        <updated>2022-03-05T14:20:16.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="简介">简介</h2>
<p>出现的问题就是，在我们大规模的集群过后，由于我们微服务的原因，我们的配置文件会修改起来比较麻烦，而且很容易改错，这个时候我们需要做的事情就是通过一个第三方的配置中心，进行配置，这里我们选择的nacos</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="简介">简介</h2>
<p>出现的问题就是，在我们大规模的集群过后，由于我们微服务的原因，我们的配置文件会修改起来比较麻烦，而且很容易改错，这个时候我们需要做的事情就是通过一个第三方的配置中心，进行配置，这里我们选择的nacos</p>
<!-- more -->
<h2 id="使用">使用</h2>
<p>在我们分布式应用中，我们为更好的完成项目的配置，减少错误我们使用到了nacos，我们需要知道的事，我们如何使用。</p>
<h2 id="获取nacos配置文件">获取nacos配置文件</h2>
<p>下面的代码我们就得到了nacos中的配置文件，在里面我们需要注意的几个点：<br>
<img src="https://IseEkko.github.io//post-images/1646490164720.png" alt="" loading="lazy"></p>
<p><img src="https://IseEkko.github.io//post-images/1646490170989.png" alt="" loading="lazy"><br>
我们需要注意的事情，是在里面有缓存的配置，如果在断网，网络拥塞的时候我们，在这里的项目就会得到缓存中的配置文件，这个配置文件是在我们运行项目的时候，独自进行创建的。<br>
<img src="https://IseEkko.github.io//post-images/1646490180362.png" alt="" loading="lazy"></p>
<h2 id="将配置文件变成struct">将配置文件变成struct</h2>
<p>在里面我们不是直接将yaml变成struct，这里我们需要注意的是，我们首先用通过yaml转换成json，然后将json放在nacos中进行配置。</p>
<p><img src="https://IseEkko.github.io//post-images/1646490186797.png" alt="" loading="lazy"><br>
在进行映射的时候，我们要创建对应的结构体，然后结构体要设置对应的json tag。<br>
监听配置的改变<br>
我们这里还需完成对配置文件改变的监听。</p>
<p><a href="https://github.com/IseEkko/DEMO/tree/master/nacos_test">Demo地址</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[链表内指定区域间反转]]></title>
        <id>https://IseEkko.github.io/post/lian-biao-nei-zhi-ding-qu-yu-jian-fan-zhuan/</id>
        <link href="https://IseEkko.github.io/post/lian-biao-nei-zhi-ding-qu-yu-jian-fan-zhuan/">
        </link>
        <updated>2022-03-04T14:25:06.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="题目">题目</h3>
<p>这个问题较之前的链表反转，存在很多不同的地方，这里我们将详细的进行说明</p>
]]></summary>
        <content type="html"><![CDATA[<h3 id="题目">题目</h3>
<p>这个问题较之前的链表反转，存在很多不同的地方，这里我们将详细的进行说明</p>
<!-- more -->
<h3 id="思路总结">思路总结</h3>
<p>这个问题在面试中也是很容易考察的，我在书写的时候出现了思维上次的错误，查看了解析过后我发现了自己在这个问题上的不足。在这里一步一步的进行解析。<br>
首先我们要明白我们做的这次反转，只是反转链表中的一部分，所以我们在交换位置位置的时候要格外的小心。<br>
<img src="https://IseEkko.github.io//post-images/1646403991242.png" alt="" loading="lazy"><br>
上面是我们准备的示意图，我们看到这里还没有发现与之前的链表反转有什么不同。<br>
因为我们是需要交换其中的一部分，所以我们现在假设我们交换的是中间两个<br>
在这里我们首先需要做的就是移动至相关位置。<br>
<img src="https://IseEkko.github.io//post-images/1646403998343.png" alt="" loading="lazy"><br>
现在我们移动到了想要的位置后，下一步就是进行交换，这里在交换的时候我们需要判断我们要交换多少次。答案是n右边界-m左边界次，这里我们要演示的是交换的核心过程<br>
<img src="https://IseEkko.github.io//post-images/1646404004469.png" alt="" loading="lazy"><br>
从图中我们看到我们首先做的是，将Next指针指向cur.Next,然后更具上面的步骤进行，我之前没有思考到位的就是pre指针的用法，最先我让他在交换的过程中也跟着交换，这是不对的。从图中我们知道他始终要指向交换后的对头上。<br>
具体的实现代码如下：<br>
<img src="https://IseEkko.github.io//post-images/1646404010538.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[链表中的节点每K个一组旋转]]></title>
        <id>https://IseEkko.github.io/post/lian-biao-zhong-de-jie-dian-mei-k-ge-yi-zu-xuan-zhuan/</id>
        <link href="https://IseEkko.github.io/post/lian-biao-zhong-de-jie-dian-mei-k-ge-yi-zu-xuan-zhuan/">
        </link>
        <updated>2022-03-04T14:22:44.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="简介">简介</h3>
<p>这个题目的难点在于，我们交换的是每组，一组的数量是不确定的，然后不足的不用交换，这里我最想思考的是我们计数处理，但是我们没有想到好的办法进行计数。</p>
]]></summary>
        <content type="html"><![CDATA[<h3 id="简介">简介</h3>
<p>这个题目的难点在于，我们交换的是每组，一组的数量是不确定的，然后不足的不用交换，这里我最想思考的是我们计数处理，但是我们没有想到好的办法进行计数。</p>
<!-- more -->
<h3 id="思路总结">思路总结</h3>
<p>在这里其实交换已经不是什么大的问题了，我们需要做的是，计数的问题，我们可以将分好组的数据，放入一个专门进行交换的函数中，然后进行交换返回。<br>
我来解析一下我们，最重要的工作，也就是计数，这里我们设置一个变量进行计数，首先我们要做的事情，我们在循环进行计数，当i等于K的时候，我们进行交换的逻辑，然后等待返回值，将i再次置为1，然后再次进行循环计数，这样我们也解决了不满足K的不进行交换，因为没有i等于K的时候，不进行交换。<br>
这个是本题目最重要的一个步骤。<br>
在我书写的时候，我总是忘记在交换循环的时候的判断的三个条件。这个需要特别的注意。<br>
实现的代码：</p>
<figure data-type="image" tabindex="1"><img src="https://IseEkko.github.io//post-images/1646403860490.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[面向连接的运输：TCP]]></title>
        <id>https://IseEkko.github.io/post/mian-xiang-lian-jie-de-yun-shu-tcp/</id>
        <link href="https://IseEkko.github.io/post/mian-xiang-lian-jie-de-yun-shu-tcp/">
        </link>
        <updated>2022-03-04T09:29:53.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="tcp连接是什么">Tcp连接是什么？</h3>
<p>Tcp连接是需要先进行相关的数据的交换的，也就双方先要进行握手，也就是双方必须发送某些预备报文段来建立确保数据传输的参数，Tcp连接是端到端的且是点到点的，也就是说是双发的，中间的路由器和其他的设施是不用管的，建立的是一条全双工的一个通道。</p>
]]></summary>
        <content type="html"><![CDATA[<h3 id="tcp连接是什么">Tcp连接是什么？</h3>
<p>Tcp连接是需要先进行相关的数据的交换的，也就双方先要进行握手，也就是双方必须发送某些预备报文段来建立确保数据传输的参数，Tcp连接是端到端的且是点到点的，也就是说是双发的，中间的路由器和其他的设施是不用管的，建立的是一条全双工的一个通道。</p>
<!-- more -->
<h3 id="tcp连接是如何建立的">Tcp连接是如何建立的？</h3>
<p>在这里简单的说一下TCP连接的建立，首先客户端发送一个特殊的报文，等到服务端接收到报文后，服务端会返回一个特殊的报文给客户端，客户端此时接收到报文后，会返回一个特殊的报文给服务端，这里我们需要注意的问题在于，前两个报文是没有载荷的，最后一个报文是有载荷的。这里说的就是TCP连接的三次握手。</p>
<h3 id="tcp报文段结构">TCP报文段结构</h3>
<p>这里我们将说明几个在TCP结构中比较重要的几个点<br>
<img src="https://IseEkko.github.io//post-images/1646386594154.png" alt="" loading="lazy"></p>
<h4 id="1-序号和确认号">1. 序号和确认号</h4>
<p>序号：在TCP报文传输的过程中，需要注意的点，从应用层进程中我们拿到了数据包，然后将数据交给TCP进行传输，在运输层要将数据交给网络层的时候，由于mss的限制，我们需要将数据进行拆分，拆分的每一块我们需要给他添加上TCP的头部，然后进行传输。在这里我们会给每个mss数据包进行编号，我们标号的号码也就是序号，序号是由数据在数据段中的偏移量进行命名的。</p>
<p>确认号：在服务端接收到数据的时候，会返回一个确认号，这个确认号的目的是为了告诉客户端，你发送的XXX-1号及之前的数据都已经接收到了，这个确认号是具有累加性的，也就是说在返回ACK=200 然后返回 ACK =300的时候，这里300就已经包含了前面的两百了，所以在确认数据传输的时候，只需要确认300就可以确认299及299以前的数据都已经接收到了</p>
<h4 id="2-超时时间的设置">2. 超时时间的设置</h4>
<p>在TCP中，为了传输效率的提升，我们需要设置一个超时的时间，在超过这个超时时间的时候，我们就会重新传输数据，以保证TCP传输的效率，但是呢不合理的超时时间会导致我们TCP传输效率的下降，那么我们应该如何来设置一个合适的时间呢。<br>
我们可以看到在书上给我们说到，其实设置这个TCP的超时时间，我们需要先测量这个传输的时间来设置，对于这个时间是没有固定的，也就是说，TCP中的超时时间是动态时刻改变中的。具体的计算公式可以看书上。</p>
<h4 id="可靠数据传输">可靠数据传输</h4>
<p>TCP实现不可靠的IP协议上实现了rdt从而保证tcp传输的可靠性</p>
<h4 id="1-有趣的事情">1. 有趣的事情</h4>
<p>在传输中的超时计时器，在TCP中我们可以看到，使用的是单一的重传计时器，在准备发送的时候，也就是在第一个bit打出的时候，启动计时器，如果超时了，会把最早的数据段重新传输，在超时器超时前接收到服务端发送的ack，这个时候会将被确认的数据从缓存区中删除，然后重新计时。<br>
在ack发送的过程中可能会出现下面这个情况<br>
<img src="https://IseEkko.github.io//post-images/1646386665276.png" alt="" loading="lazy"><br>
这个时候因为ack的丢失导致我们的计时器的超时，这个时候我们的客户端会重新传输该数据包，然后此时服务端返回给我们ACK，这个时候因为在之前服务端就已经确认了该数据包，所以后面传输过来的数据包，TCP会选择将其丢弃。<br>
<img src="https://IseEkko.github.io//post-images/1646386767647.png" alt="" loading="lazy"><br>
在上图中，我们看到客户端传输了两段数据过来，然后都被接收到了，但是在ack的传输中由于导致了超时机制，导致数据包的重新传输，这里我们需要注意的点是，我们看到在超时过后这里TCP只是把最早传输的数据包进行了传输，然后后面， 我们看到接收到了重新传输的数据，这个时候返回的ack是120，这个是因为累积确认机制。</p>
<h4 id="2-超时间隔加倍">2. 超时间隔加倍</h4>
<pre><code>   对于这里我们看得不是很懂但是知道在干嘛，这里就是在超时的时候对超时时间进行一个翻倍处理，我查了一下资料好像，这里最多进行两次翻倍处理。
</code></pre>
<h4 id="3-快速重传">3. 快速重传</h4>
<p>快速重传机制，是在客户端重新传输了数据过后，如果服务端返回了三次一样的ack这个时候，就算没有超时，也会直接进行重传处理。</p>
<h4 id="4-tcp选择的是gbn还是sr">4. TCP选择的是GBN还是SR</h4>
<p>对于这个问题，首先给出答案，这个答案就是GBN和SR的结合，我们将简单的概述一下这个重传的机制，首先TCP发出报文，如果说接收到的报文，出现了失序，那么我们会先把这个数据包缓存下来，然后继续后面的上传，同时记忆没有成功的获取的数据报文。这里我们可以结合到我们的快速重传机制。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用zap日志]]></title>
        <id>https://IseEkko.github.io/post/shi-yong-zap-ri-zhi/</id>
        <link href="https://IseEkko.github.io/post/shi-yong-zap-ri-zhi/">
        </link>
        <updated>2022-02-12T05:34:31.000Z</updated>
        <summary type="html"><![CDATA[<p>使用zap日志</p>
]]></summary>
        <content type="html"><![CDATA[<p>使用zap日志</p>
<!-- more -->
<h2 id="将日志打印到文件里面">将日志打印到文件里面</h2>
<pre><code>package main

import (
	&quot;go.uber.org/zap&quot;
	&quot;time&quot;
)

func NewLogger() (*zap.Logger, error) {
	ctg := zap.NewProductionConfig()
	ctg.OutputPaths = []string{
		&quot;./myproject.log&quot;,
	}
	return ctg.Build()
}
func main() {
	looger, err := NewLogger()
	if err != nil {
		panic(err)
	}
	sugar := looger.Sugar()
	defer sugar.Sync()
	url := &quot;https://imooc.com&quot;
	sugar.Info(&quot;failed to fetch URL&quot;,
		// Structured context as loosely typed key-value pairs.
		&quot;url&quot;, url,
		&quot;attempt&quot;, 3,
		&quot;backoff&quot;, time.Second,
	)
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[子集问题（1）]]></title>
        <id>https://IseEkko.github.io/post/zi-ji-wen-ti-1/</id>
        <link href="https://IseEkko.github.io/post/zi-ji-wen-ti-1/">
        </link>
        <updated>2022-02-09T06:56:37.000Z</updated>
        <summary type="html"><![CDATA[<p>使用回溯算法解决子集问题</p>
]]></summary>
        <content type="html"><![CDATA[<p>使用回溯算法解决子集问题</p>
<!-- more -->
<h2 id="题目">题目</h2>
<p>给你一个整数数组 nums ，数组中的元素 互不相同 。返回该数组所有可能的子集（幂集）。</p>
<p>解集 不能 包含重复的子集。你可以按 任意顺序 返回解集。</p>
<p>示例 1：</p>
<p>输入：nums = [1,2,3]<br>
输出：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]<br>
示例 2：</p>
<p>输入：nums = [0]<br>
输出：[[],[0]]</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/subsets<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h2 id="思路图">思路图</h2>
<p><img src="https://IseEkko.github.io//post-images/1644389891372.png" alt="" loading="lazy"><br>
这里很清楚的看出我们解题的思路，也是解回溯的一般思路</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[用户密码加密]]></title>
        <id>https://IseEkko.github.io/post/yong-hu-mi-ma-jia-mi/</id>
        <link href="https://IseEkko.github.io/post/yong-hu-mi-ma-jia-mi/">
        </link>
        <updated>2022-02-07T13:43:51.000Z</updated>
        <summary type="html"><![CDATA[<p>在我们写程序中会有密码，密码我们肯定是需要有加密的一个环节。那么我们这里介绍一下md5加密</p>
]]></summary>
        <content type="html"><![CDATA[<p>在我们写程序中会有密码，密码我们肯定是需要有加密的一个环节。那么我们这里介绍一下md5加密</p>
<!-- more -->
<h2 id="加密算法的分类">加密算法的分类</h2>
<p><img src="https://IseEkko.github.io//post-images/1644241541998.png" alt="" loading="lazy"><br>
这里我们可以看到分为两类<br>
那么两类的区别在于那里呢？</p>
<h3 id="什么是对称加密">什么是对称加密</h3>
<p>对于对称加密，最简单的理解就是，在加密和解密的时候使用的是同一把钥匙，这样对于用户来说是不安全的，因为我们一旦知道了加密算法的钥匙，那么所有的密码我都可以解密出来，这对于用户的账号安全是一个很大的威胁。<br>
那么我们这里就引出了非对称加密。</p>
<h3 id="什么是非对称加密">什么是非对称加密</h3>
<p>非对称加密，也就是密码不能被反解出来。那么我们也会遇见一个问题，不能反解那么我们忘记了密码那么我们应该怎么办呢？<br>
对于这个问题，我们使用的解决办法是使用一个链接发给用户进行修改，这样既保证了安全性，也解决了这个问题。<br>
判断用户密码输入是否正确的问题，这里我们不能对数据库的密码进行解密，那么我们就转换一下思路，我们对用户输入的值进行加密，然后进行比对，这样这个问题就得到的解决。<br>
这里我们详细的说明一下一个非对称加密，MD5</p>
<h2 id="md5-信息摘要加密算法">MD5 信息摘要加密算法</h2>
<p><img src="https://IseEkko.github.io//post-images/1644242773549.png" alt="" loading="lazy"><br>
在go中，写md5加密算法是很容易的，因为有现成的包可以使用</p>
<pre><code>func ginMd5(code string)string{
	Md5 :=  md5.New()
	_,_ = io.WriteString(Md5,code)
	return hex.EncodeToString(Md5.Sum(nil))
}
</code></pre>
<p>使用的包是：&quot;crypto/md5&quot;<br>
对于这里我们不用太纠结这里的函数，这里我们需要做的就是直接使用就可以了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GIN中间件]]></title>
        <id>https://IseEkko.github.io/post/gin-zhong-jian-jian/</id>
        <link href="https://IseEkko.github.io/post/gin-zhong-jian-jian/">
        </link>
        <updated>2022-01-21T13:32:35.000Z</updated>
        <summary type="html"><![CDATA[<p>关于中间件的使用，和原理</p>
]]></summary>
        <content type="html"><![CDATA[<p>关于中间件的使用，和原理</p>
<!-- more -->
<h2 id="使用中间件">使用中间件</h2>
<p>关于中间件的使用，让我想到了gin.Default()和gin.new(）的区别，区别在什么呢，使用Default，默认是使用了两个全局中间件，那么我们查看default的源码，我们可以知道中间件是怎么使用的，下面我看一下default的源码：</p>
<pre><code>func Default() *Engine {
	debugPrintWARNINGDefault()
	engine := New()
	engine.Use(Logger(), Recovery())
	return engine
}
</code></pre>
<p>这里我们直接把目光看到：engine.Use(Logger(), Recovery())，这里直接使用use就使用的中间件。所以我们知道了使用中间件使用的是，use这个方法。</p>
<pre><code>package main

import (
	&quot;fmt&quot;
	&quot;github.com/gin-gonic/gin&quot;
	&quot;net/http&quot;
	&quot;time&quot;
)

func main() {
	//我们在前面的学习我们知道了，使用default。会默认的使用两个中间件。
	//这我们为了演示使用中间件，这里我们就使用NEw创建
//r := gin.Default()
    r := gin.New()
	//使用logger中间件
	r.Use(mylogger())
	//使用recovery
	r.Use(gin.Recovery())
	//上面的使用方法是为全局使用的。

	/**
	下面这个方式，是在这个组内的路由都会使用到这个中间件。
	 */
	auth := r.Group(&quot;/goods&quot;, func(c *gin.Context) {

	})
	auth.Use(authsre)
	auth.GET(&quot;/ceshi&quot;)
	auth.GET(&quot;/c&quot;)
	r.Run()
}

func authsre(context *gin.Context) {
	fmt.Println(&quot;goods中间件&quot;)
}

func mylogger() gin.HandlerFunc{
	return func(c *gin.Context) {
		t := time.Now()
		c.Set(&quot;example&quot;,&quot;123456&quot;)
		c.Next()
		end := time.Since(t)
		fmt.Printf(&quot;耗时：%v \n&quot;,end)
		status := c.Writer.Status()
		fmt.Println(&quot;状态：&quot;,status)
	}
}

func  TokenReqiired()gin.HandlerFunc  {
	return func(c *gin.Context){
		var token string
		for k,v := range c.Request.Header{
			if k == &quot;x-token&quot;{
				if k == &quot;x-token&quot;{
					token = v[0]
				}
			}
		}
		if token != &quot;bobby&quot;{
			c.JSON(http.StatusUnauthorized,gin.H{
				&quot;msg&quot;:&quot;未登录&quot;,
			})
			return
			//这里只能使用c.Abort()就会阻止后面的逻辑的运行。用return 是没有用的
		}
		c.Next()
	}
}
</code></pre>
<p>上面就是我们使用中间件的方式。</p>
<h2 id="原理解析">原理解析</h2>
<p>这里我们发现一个问题，在中间件中，我们使用了return处理逻辑的时候，发现我们不想让后面的逻辑运行，但是使用return还是使用了，那么这是为什么呢。<br>
这里我们需要注意的就是这中间件执行的流程<br>
这里我们知道我们使用中间件使用的是，use去注册调用的，这个时候我们查看一个他的源码：</p>
<pre><code>func (group *RouterGroup) Use(middleware ...HandlerFunc) IRoutes {
	group.Handlers = append(group.Handlers, middleware...)
	return group.returnObj()
}
</code></pre>
<p>点开过后，我们发现这里有一个：group.Handlers</p>
<pre><code>// HandlersChain defines a HandlerFunc array.
type HandlersChain []HandlerFunc
</code></pre>
<p>这里发现了一个切片，然后我们再去查看运行逻辑中，我们是怎么注册路由的，然后我们点开同样发现了这个切片，然后我们对比了一下，我们发现了一个问题，也就是中间件和运行的逻辑分别是不同的handler并不是一体的，他们会按照顺序被安排到这个切片中，所以我们return是无效的，这个时候我们应该怎么办呢。<br>
这里原理也很简单，也就是我们不想去执行这些handler的时候，我们直接把后面的删除，或者把指针移到最后面就可以了。<br>
使用到的方法是：<br>
c.Abort()<br>
在上面我们书写的使用中间件源码中也有。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GIN中的错误翻译]]></title>
        <id>https://IseEkko.github.io/post/gin-zhong-de-cuo-wu-fan-yi/</id>
        <link href="https://IseEkko.github.io/post/gin-zhong-de-cuo-wu-fan-yi/">
        </link>
        <updated>2022-01-21T11:25:00.000Z</updated>
        <summary type="html"><![CDATA[<p>我们在书写程序的时候，遇见报错对于一些程序员来说全英文的报错不是很友好，这里找到了一个错误翻译的方法</p>
]]></summary>
        <content type="html"><![CDATA[<p>我们在书写程序的时候，遇见报错对于一些程序员来说全英文的报错不是很友好，这里找到了一个错误翻译的方法</p>
<!-- more -->
<h2 id="关于翻译器的导入">关于翻译器的导入</h2>
<p>这里我们先要导入预备的资源，然后再创建翻译器<br>
我们需要导入的包</p>
<pre><code>&quot;github.com/gin-gonic/gin/binding&quot;
	&quot;github.com/go-playground/locales/en&quot;
	&quot;github.com/go-playground/locales/zh&quot;
	ut &quot;github.com/go-playground/universal-translator&quot;
	&quot;github.com/go-playground/validator/v10&quot;
	en_translations &quot;github.com/go-playground/validator/v10/translations/en&quot;
	zh_translations &quot;github.com/go-playground/validator/v10/translations/zh&quot;
</code></pre>
<p>导入这些包后我们就可以开始相关的书写了，这里大家需要注意的是，我们在书写的时候，导包可以是自动导入的，这里写出来是怕同学忘记有那些包，或者导包失败导致后序的代码无效。</p>
<h2 id="初始化翻译器">初始化翻译器</h2>
<pre><code>//翻译的更换
func InitTrans(locale string)(err error){
	if v,ok := binding.Validator.Engine().(*validator.Validate);ok{
		//注册一个获取json的tag自定义方法
		v.RegisterTagNameFunc(func(fld reflect.StructField) string {
			name := strings.SplitN(fld.Tag.Get(&quot;json&quot;),&quot;,&quot;,2)[0]
			if name == &quot;-&quot;{
				return &quot;&quot;
			}
			return name
		})
		zhT := zh.New()//中文翻译器
		enT := en.New()//英文翻译器
		uni := ut.New(enT,zhT,enT)
		trans,ok = uni.GetTranslator(locale)
		if !ok {
			return fmt.Errorf(&quot;uni.GetTranslator(%s)&quot;,locale)
		}
		switch locale{
		case &quot;en&quot;:
			en_translations.RegisterDefaultTranslations(v,trans)
		case &quot;zh&quot;:
			zh_translations.RegisterDefaultTranslations(v,trans)
		default:
			zh_translations.RegisterDefaultTranslations(v,trans)
		}
	}
	return nil
}
</code></pre>
<p>后面我们发现了一个问题，就是我们出现的效果是这样的有前缀的，结构体前缀，当然我们是不需要的所以后序我们添加上了：</p>
<pre><code>func RemoveTopStruct(fileds map[string]string)map[string]string  {
	rsp := map[string]string{}
	for field ,err := range fileds{
		rsp[field[strings.Index(field,&quot;.&quot;)+1:]] = err
		}
		return rsp
}
</code></pre>
<p>这个方法我们可以得到tag。<br>
然后我们在测试的时候，发现了一个问题，就是我们得到的错误，字段他没有按照tag来完成书写，这个时候我们加上了这一段代码实现功能。</p>
<pre><code>//注册一个获取json的tag自定义方法
		v.RegisterTagNameFunc(func(fld reflect.StructField) string {
			name := strings.SplitN(fld.Tag.Get(&quot;json&quot;),&quot;,&quot;,2)[0]
			if name == &quot;-&quot;{
				return &quot;&quot;
			}
			return name
		})
</code></pre>
<h2 id="最后使用">最后使用</h2>
<p>在使用的时候，我们需要注意的事情，我们要注册一个全局的变量，这样才能在任何的地方使用。</p>
<pre><code>var trans ut.Translator
</code></pre>
<p>创建完成后，使用</p>
<pre><code>//初始化翻译
	if err := InitTrans(&quot;zh&quot;);err != nil{
	  fmt.Println(&quot;初始化翻译器错误&quot;)
	  return
	}
   router := gin.Default()
   router.POST(&quot;/login&quot;, func(c *gin.Context) {
	   var login LoginForm
	  if  err := c.ShouldBind(&amp;login);err != nil{
		  errs ,ok := err.(validator.ValidationErrors)
		  if !ok {
			  c.JSON(http.StatusOK,gin.H{
				  &quot;msg&quot;:err.Error(),
			  })
		  }
		 c.JSON(http.StatusBadRequest,gin.H{
			  &quot;err&quot;: RemoveTopStruct(errs.Translate(trans)),
		  })
		  return
	  }
		  c.JSON(http.StatusOK,gin.H{
			  &quot;msg&quot;:&quot;登录成功&quot;,
		  })
   })
</code></pre>
]]></content>
    </entry>
</feed>